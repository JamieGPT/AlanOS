import openai
from textblob import TextBlob
from collections import defaultdict
from transformers import pipeline

class MindfulMateCombined:
    def __init__(self, openai_api_key):
        self.user_profile = {}
        self.memory = defaultdict(list)
        self.openai_api_key = openai_api_key
        self.conversation_history = []
        self.preferences = defaultdict(list)
        self.user_communication_style = defaultdict(int)
        self.user_emotion_history = defaultdict(list)
        self.emotion_classifier = pipeline("sentiment-analysis")

    def generate_response_with_gpt3(self, user_input):
        prompt = "\n".join(self.conversation_history + [f"User: {user_input}", "MindfulMate:"])
        response = openai.Completion.create(
            engine="davinci",  # Use the GPT-3 "davinci" engine
            prompt=prompt,
            max_tokens=50,  # Control the length of the response
            api_key=self.openai_api_key
        )
        return response.choices[0].text.strip()

    def process_user_input(self, user_input):
        if user_input.lower() == "exit":
            return "Goodbye!"

        sentiment = self.analyze_sentiment(user_input)
        sentiment_response = self.handle_sentiment(sentiment)

        emotion = self.analyze_emotion(user_input)
        emotion_response = self.handle_emotion(emotion)

        response = ""
        if "name" not in self.user_profile:
            response += self.gather_user_name(user_input)
        else:
            self.conversation_history.append(f"User: {user_input}")
            response += self.generate_response_with_gpt3(user_input)
            self.conversation_history.append(f"MindfulMate: {response}")

        self.update_communication_style(user_input)
        self.update_emotion_history(user_input, emotion)

        preference_response = self.handle_preferences(user_input)
        
        return sentiment_response + " " + response + " " + emotion_response + " " + preference_response

    def gather_user_name(self, user_input):
        self.user_profile["name"] = user_input
        return f"Nice to meet you, {user_input}! How can I help you today?"

    def handle_preferences(self, user_input):
        if "I like" in user_input:
            preference = user_input.split("I like", 1)[1].strip()
            self.preferences[self.user_profile["name"]].append(preference)
            return f"I've noted that you like {preference}."
        elif "recommend" in user_input:
            return self.generate_preference_recommendation()

        return ""

    def generate_preference_recommendation(self):
        if self.user_profile["name"] in self.preferences:
            preferences = self.preferences[self.user_profile["name"]]
            if preferences:
                return f"Based on your preferences, how about trying {preferences[0]}?"
        
        return "I'm sorry, I don't have enough information to make a recommendation."

    def provide_emotional_support(self, sentiment):
        if sentiment < -0.5:
            return "I'm here to listen and support you. Remember, tough times don't last forever."
        elif sentiment > 0.5:
            return "It's great to hear that you're feeling positive! Keep up the positive vibes."

        return ""

    def update_communication_style(self, user_input):
        for word in user_input.split():
            self.user_communication_style[word] += 1

    def update_emotion_history(self, user_input, emotion):
        self.user_emotion_history[self.user_profile["name"]].append(emotion)

    def handle_emotion(self, emotion):
        if emotion < -0.5:
            return "I'm here to offer emotional support and be a source of positivity for you."
        elif emotion > 0.5:
            return "I'm glad to see you're in good spirits! Let's keep the positive energy flowing."

        return ""

    def handle_sentiment(self, sentiment):
        if sentiment > 0.5:
            return "I'm glad to hear that you're feeling positive."
        elif sentiment < -0.5:
            return "I'm sorry to hear that you're feeling down. I'm here to listen and offer support."

    def analyze_sentiment(self, text):
        blob = TextBlob(text)
        return blob.sentiment.polarity

    def analyze_emotion(self, text):
        result = self.emotion_classifier(text)
        emotion_label = result[0]["label"]
        if emotion_label == "LABEL_1":
            return 1.0  # Positive emotion
        elif emotion_label == "LABEL_0":
            return -1.0  # Negative emotion
        else:
            return 0.0  # Neutral emotion

# Example usage with combined features
openai_api_key = "YOUR_OPENAI_API_KEY"
mindful_mate_combined = MindfulMateCombined(openai_api_key)

while True:
    user_input = input("You: ")
    response_combined = mindful_mate_combined.process_user_input(user_input)
    print("MindfulMate (Combined):", response_combined)
    if user_input.lower() == "exit":
        break

